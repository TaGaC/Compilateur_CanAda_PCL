-- Test avec des erreurs sémantiques
with Ada.Text_IO ; use Ada.Text_IO ;

procedure Main is 

procedure erreursVariables is

A : Integer ;
B : Integer ;
C : Character ; 

begin

-- On initialise une variable non déclarée
z = 5 ;

-- On utilise une varible non initialisée
B = A + 5 ;

-- On initialise une variable avec un élément qui n'est pas de son type
C = 1 ; 
B = C ;

end erreursVariables ; 

function fonct(e: Integer; f: Integer) return Integer is g : Integer ;
begin
g := e*f ;
return g ;
end fonct ;

-- La fonction ne se termine pas avec le bon identifiant à la suite du end 
function error(h: Integer) return Integer is i : Integer ;
begin
i := h ;
return h ;
end noerror ;

-- La fonction n'a pas de return
function noReturn(k:Integer) return Integer is l : Integer ;
begin
l := k ;
end noReturn ;

-- On crée une fonction avec un nom déjà utiliser 
function fonct(m: Integer; n: Integer) return Integer is o : Integer ;
begin
o := m-n ;
return o ;
end fonct ;


c : integer ;

begin 

-- On appelle une fonction qui n'existe pas 
fonction(2,3) ;

-- On appelle la fonction avec plus de paramètres 
fonct(1,2,3) ;

c = 2 ;
-- On appelle la fonction avec un paramètre du mauvais type
fonct(1,c) ;


end Main ; eof
