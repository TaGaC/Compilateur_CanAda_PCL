Liste des tokens :
(0, 28, 2)
(0, 31, 2)
(2, 11, 2)
(0, 26, 2)
(0, 31, 2)
(2, 11, 2)
(0, 18, 3)
(3, 0, 3)
(0, 11, 3)
(0, 8, 4)
(3, 1, 4)
(2, 7, 4)
(3, 2, 4)
(2, 9, 4)
(3, 3, 4)
(2, 8, 4)
(0, 21, 4)
(0, 30, 4)
(0, 11, 4)
(3, 4, 5)
(2, 10, 5)
(0, 30, 5)
(2, 11, 5)
(0, 2, 6)
(3, 4, 7)
(1, 12, 7)
(3, 2, 7)
(1, 2, 7)
(3, 3, 7)
(2, 11, 7)
(3, 4, 10)
(1, 12, 10)
(3, 2, 10)
(1, 2, 10)
(3, 3, 10)
(2, 11, 10)
(0, 21, 12)
(3, 4, 12)
(0, 5, 13)
(3, 1, 13)
(2, 11, 13)
(0, 8, 14)
(3, 5, 14)
(2, 7, 14)
(3, 2, 14)
(2, 10, 14)
(0, 30, 14)
(2, 11, 14)
(3, 3, 14)
(2, 10, 14)
(0, 30, 14)
(2, 8, 14)
(0, 21, 14)
(0, 30, 14)
(0, 11, 14)
(3, 6, 15)
(2, 10, 15)
(0, 30, 15)
(0, 2, 16)
(3, 6, 17)
(1, 12, 17)
(3, 2, 17)
(1, 2, 17)
(4, 2, 17)
(1, 0, 17)
(3, 3, 17)
(1, 2, 17)
(4, 2, 17)
(2, 11, 17)
(0, 21, 18)
(3, 6, 18)
(0, 5, 19)
(3, 5, 19)
(2, 11, 19)
(3, 7, 21)
(2, 10, 21)
(0, 30, 21)
(2, 11, 21)
(0, 2, 23)
(3, 8, 25)
(1, 12, 25)
(4, 2, 25)
(2, 11, 25)
(0, 9, 26)
(3, 7, 26)
(1, 8, 26)
(4, 1, 26)
(0, 23, 27)
(3, 9, 27)
(1, 12, 27)
(3, 5, 27)
(2, 7, 27)
(4, 2, 27)
(2, 9, 27)
(4, 3, 27)
(2, 8, 27)
(2, 11, 27)
(3, 10, 28)
(2, 7, 28)
(3, 9, 28)
(2, 8, 28)
(2, 11, 28)
(0, 3, 29)
(3, 9, 29)
(1, 12, 29)
(3, 11, 29)
(2, 7, 29)
(4, 2, 29)
(2, 9, 29)
(4, 3, 29)
(2, 8, 29)
(2, 11, 29)
(3, 10, 30)
(2, 7, 30)
(3, 9, 30)
(2, 8, 30)
(2, 11, 30)
(0, 5, 31)
(0, 9, 31)
(2, 11, 31)
(0, 5, 32)
(3, 0, 32)
(2, 11, 32)

Table Lexicale :
Keyword: ['access', 'and', 'begin', 'else', 'elsif', 'end', 'false', 'for', 'function', 'if', 'in', 'is', 'loop', 'new', 'not', 'null', 'or', 'out', 'procedure', 'record', 'rem', 'return', 'reverse', 'then', 'true', 'type', 'use', 'while', 'with', 'character', 'integer', 'ada.text_io', 'eof']
Operator: ['+', '-', '*', '/', '<', '>', '<=', '>=', '=', '/=', '=>', '.', ':=', '..', '-']
Syntax Operator: ['!', '"', '#', '$', '%', '&', "'", '(', ')', ',', ':', ';', '?', '@', '[', '\\', ']', '^', '_', '`', '{', '|', '}', '~']
Identifier: ['undebut', 'airerectangle', 'larg', 'long', 'aire', 'perimetrerectangle', 'p', 'choix', 'remember', 'valeur', 'put', 'airerectangale']
Constant Number: [2, 1, 3]
Invalid Character: []




Liste des tokens pour tests/test_lexeur/test1.txt avec les tokens de la forme <type, valeur>: 

<Keyword, with> <Keyword, ada.text_io> <Syntax Operator, ;> <Keyword, use> <Keyword, ada.text_io> <Syntax Operator, ;> 
<Keyword, procedure> <Identifier, undebut> <Keyword, is> 
<Keyword, function> <Identifier, airerectangle> <Syntax Operator, (> <Identifier, larg> <Syntax Operator, ,> <Identifier, long> <Syntax Operator, )> <Keyword, return> <Keyword, integer> <Keyword, is> 
<Identifier, aire> <Syntax Operator, :> <Keyword, integer> <Syntax Operator, ;> 
<Keyword, begin> 
<Identifier, aire> <Operator, :=> <Identifier, larg> <Operator, *> <Identifier, long> <Syntax Operator, ;> 
<Identifier, aire> <Operator, :=> <Identifier, larg> <Operator, *> <Identifier, long> <Syntax Operator, ;> 
<Keyword, return> <Identifier, aire> 
<Keyword, end> <Identifier, airerectangle> <Syntax Operator, ;> 
<Keyword, function> <Identifier, perimetrerectangle> <Syntax Operator, (> <Identifier, larg> <Syntax Operator, :> <Keyword, integer> <Syntax Operator, ;> <Identifier, long> <Syntax Operator, :> <Keyword, integer> <Syntax Operator, )> <Keyword, return> <Keyword, integer> <Keyword, is> 
<Identifier, p> <Syntax Operator, :> <Keyword, integer> 
<Keyword, begin> 
<Identifier, p> <Operator, :=> <Identifier, larg> <Operator, *> <Constant Number, 2> <Operator, +> <Identifier, long> <Operator, *> <Constant Number, 2> <Syntax Operator, ;> 
<Keyword, return> <Identifier, p> 
<Keyword, end> <Identifier, perimetrerectangle> <Syntax Operator, ;> 
<Identifier, choix> <Syntax Operator, :> <Keyword, integer> <Syntax Operator, ;> 
<Keyword, begin> 
<Identifier, remember> <Operator, :=> <Constant Number, 2> <Syntax Operator, ;> 
<Keyword, if> <Identifier, choix> <Operator, => <Constant Number, 1> 
<Keyword, then> <Identifier, valeur> <Operator, :=> <Identifier, perimetrerectangle> <Syntax Operator, (> <Constant Number, 2> <Syntax Operator, ,> <Constant Number, 3> <Syntax Operator, )> <Syntax Operator, ;> 
<Identifier, put> <Syntax Operator, (> <Identifier, valeur> <Syntax Operator, )> <Syntax Operator, ;> 
<Keyword, else> <Identifier, valeur> <Operator, :=> <Identifier, airerectangale> <Syntax Operator, (> <Constant Number, 2> <Syntax Operator, ,> <Constant Number, 3> <Syntax Operator, )> <Syntax Operator, ;> 
<Identifier, put> <Syntax Operator, (> <Identifier, valeur> <Syntax Operator, )> <Syntax Operator, ;> 
<Keyword, end> <Keyword, if> <Syntax Operator, ;> 
<Keyword, end> <Identifier, undebut> <Syntax Operator, ;> 



Liste brutes des tokens: 

<0, 28> <0, 31> <2, 11> <0, 26> <0, 31> <2, 11> 
<0, 18> <3, 0> <0, 11> 
<0, 8> <3, 1> <2, 7> <3, 2> <2, 9> <3, 3> <2, 8> <0, 21> <0, 30> <0, 11> 
<3, 4> <2, 10> <0, 30> <2, 11> 
<0, 2> 
<3, 4> <1, 12> <3, 2> <1, 2> <3, 3> <2, 11> 
<3, 4> <1, 12> <3, 2> <1, 2> <3, 3> <2, 11> 
<0, 21> <3, 4> 
<0, 5> <3, 1> <2, 11> 
<0, 8> <3, 5> <2, 7> <3, 2> <2, 10> <0, 30> <2, 11> <3, 3> <2, 10> <0, 30> <2, 8> <0, 21> <0, 30> <0, 11> 
<3, 6> <2, 10> <0, 30> 
<0, 2> 
<3, 6> <1, 12> <3, 2> <1, 2> <4, 2> <1, 0> <3, 3> <1, 2> <4, 2> <2, 11> 
<0, 21> <3, 6> 
<0, 5> <3, 5> <2, 11> 
<3, 7> <2, 10> <0, 30> <2, 11> 
<0, 2> 
<3, 8> <1, 12> <4, 2> <2, 11> 
<0, 9> <3, 7> <1, 8> <4, 1> 
<0, 23> <3, 9> <1, 12> <3, 5> <2, 7> <4, 2> <2, 9> <4, 3> <2, 8> <2, 11> 
<3, 10> <2, 7> <3, 9> <2, 8> <2, 11> 
<0, 3> <3, 9> <1, 12> <3, 11> <2, 7> <4, 2> <2, 9> <4, 3> <2, 8> <2, 11> 
<3, 10> <2, 7> <3, 9> <2, 8> <2, 11> 
<0, 5> <0, 9> <2, 11> 
<0, 5> <3, 0> <2, 11> 